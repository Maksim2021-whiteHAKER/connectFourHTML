import { logicSlider, sliderLanguages, flagImages, updateVersionDisplay } from "./translations.js";

document.addEventListener('DOMContentLoaded', () => {
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
     if (typeof window.changeLanguage !== 'function') {
        console.warn('–§—É–Ω–∫—Ü–∏—è changeLanguage –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –°–ª–∞–π–¥–µ—Ä —è–∑—ã–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
        return;
    }
    if (typeof sliderLanguages === 'undefined' || typeof flagImages === 'undefined') {
        console.warn('–î–∞–Ω–Ω—ã–µ sliderLanguages –∏–ª–∏ flagImages –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –°–ª–∞–π–¥–µ—Ä —è–∑—ã–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
        return;
    }
    if (!document.getElementById('languageSliderContainer')) {
         console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∞–π–¥–µ—Ä–∞ #languageSliderContainer –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM. –°–ª–∞–π–¥–µ—Ä —è–∑—ã–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.');
         return;
    }

    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ —è–∑—ã–∫–æ–≤...");
    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞
    logicSlider();
    console.log("–°–ª–∞–π–¥–µ—Ä —è–∑—ã–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");

    console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞')
    applyTranslations()
    updateVersionDisplay()

    console.log('–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω')

    const mainMenu = document.getElementById('mainMenu');
    const creativeSettings = document.getElementById('creativeSettings');
    const customizationPanel = document.getElementById('customizationPanel');
    const normalModeBtn = document.getElementById('normalMode');
    const creativeModeBtn = document.getElementById('creativeMode');
    const customizationBtn = document.getElementById('customizationBtn');
    const startCreativeBtn = document.getElementById('startCreativeBtn');
    const saveCustomizationBtn = document.getElementById('saveCustomizationBtn');
    const addPlayerBtn = document.getElementById('addPlayerBtn');
    const removePlayerBtn = document.getElementById('removePlayerBtn');
    const container = document.querySelector('.container');
    const scoreBoard = document.getElementById('scoreBoard');
    const gameInfo = document.getElementById('gameInfo');
    const status = document.getElementById('status');
    const columnNumbers = document.getElementById('columnNumbers');
    const rowLetters = document.getElementById('rowLetters');
    const board = document.getElementById('board');
    const restartBtn = document.getElementById('restartBtn');
    const settingsBtn = document.getElementById('settingsBtn');
    const backToMainBtn = document.getElementById('backToMainBtn');
    const backToMainFromSettings = document.getElementById('backToMainFromSettings');
    const backToMainFromCustomization = document.getElementById('backToMainFromCustomization');
    const winModal = document.getElementById('winModal');
    const drawModal = document.getElementById('drawModal');
    const winMessage = document.getElementById('winMessage');
    const winDescription = document.getElementById('winDescription');
    const playAgainBtn = document.getElementById('playAgainBtn');
    const playAgainAfterDrawBtn = document.getElementById('playAgainAfterDrawBtn');
    const backToMainFromWin = document.getElementById('backToMainFromWin');
    const backToMainAfterDrawBtn = document.getElementById('backToMainAfterDrawBtn');

    function toggleButtonsMenu(hide, callback) {
        const buttonsMenu = document.querySelector('.buttons-menu');
        if (!buttonsMenu) {
            console.warn('–≠–ª–µ–º–µ–Ω—Ç .buttons-menu –Ω–µ –Ω–∞–π–¥–µ–Ω');
            if (callback && typeof callback === 'function') callback();
            return;
        }
    
        if (hide) {
            // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            buttonsMenu.classList.add('fade-transition');
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º callback
            setTimeout(() => {
                if (callback && typeof callback === 'function') callback();
            }, 400); // 400ms = –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å transition –≤ CSS
        } else {
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª –≤–∏–¥–∏–º—ã–º
            buttonsMenu.classList.remove('fade-transition');
            // –ñ–¥–µ–º –æ–¥–∏–Ω –∫–∞–¥—Ä (–∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ), —á—Ç–æ–±—ã CSS –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è, –∑–∞—Ç–µ–º callback
            requestAnimationFrame(() => {
                 // setTimeout —Å 0 –∏–ª–∏ requestAnimationFrame –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, 
                 // —á—Ç–æ callback –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
                 setTimeout(() => {
                     if (callback && typeof callback === 'function') callback();
                 }, 0);
            });
            // –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å callback —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω–∞:
            // if (callback && typeof callback === 'function') callback();
        }
    }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
    const playerModals = {
        1: document.getElementById('player1Modal'),
        2: document.getElementById('player2Modal'),
        3: document.getElementById('player3Modal'),
        4: document.getElementById('player4Modal')
    };

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
    let game;
    let playerScores = [0, 0, 0, 0];
    let currentTheme = 'default'; // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    // --- –ò–ó–ú–ï–ù–ï–ù–û: –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–±–æ—á—É—é –∫–æ–ø–∏—é ---
    let originalPlayerColors = ['#e74c3c', '#f1c40f', '#3498db', '#2ecc71'];
    let playerColors = [...originalPlayerColors]; // –†–∞–±–æ—á–∞—è –∫–æ–ø–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞
    let gameMode = 'single';
    let lastLoser = null;
    let maxPlayers = 4;
    let symbolBot = 'üëæ'

    let playerNicknames = {
        1: "–ò–≥—Ä–æ–∫ 1",
        2: "–ò–≥—Ä–æ–∫ 2",
        3: "–ò–≥—Ä–æ–∫ 3",
        4: "–ò–≥—Ä–æ–∫ 4"
    }

    let bots = {
        // –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
        /** 5: { 5 - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –±–æ—Ç–∞
         * id: 5,
         * name: "–ë–æ—Ç".
         * symbol: "ü§ñ"
         * color: "#808080" - —Å–µ—Ä—ã–π
         * isActive: false,
         * difficulty: "easy"
        }
        */
    }
    
    // --- –ù–û–í–û–ï: –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∏–≥—É—Ä–æ–∫ –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ ---
    const themeSymbols = {
        'default': '‚óè',
        'skull': 'üíÄ',
        'hearts': '‚ù§',
        'turtles': 'üê¢',
        'stars': '‚òÖ',
        'squares': '‚ñ†'
    };
    const creativeModeThemes = ['default', 'skull', 'hearts', 'turtles', 'stars', 'squares'];
    let isCreativeMode = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞
    let playerThemesInCreative = {}; // –•—Ä–∞–Ω–∏—Ç —Ç–µ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    normalModeBtn.addEventListener('click', () => {
        isCreativeMode = false;
        if (isCreativeMode === false){
            alert(`–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...`)
            return;
        }
        gameMode = 'single';
        bots = {};
        toggleButtonsMenu(true, () => {
            startGame(6, 7, 2);
        })
    });

    creativeModeBtn.addEventListener('click', () => {
        toggleButtonsMenu(true, () => {
            creativeSettings.style.display = 'block';
            customizationPanel.style.display = 'none';
        })
    });

    customizationBtn.addEventListener('click', () => {
        toggleButtonsMenu(true, () => {
            creativeSettings.style.display = 'none';
            customizationPanel.style.display = 'block';
        })
    });

    startCreativeBtn.addEventListener('click', () => {
        const rows = parseInt(document.getElementById('rows').value);
        const columns = parseInt(document.getElementById('columns').value);
        const players = parseInt(document.getElementById('players').value);
        if (rows < 4 || rows > 20) {
            alert('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 4 –¥–æ 20');
            return;
        }
        if (columns < 4 || columns > 20) {
            alert('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 4 –¥–æ 20');
            return;
        }
        if (players < 1 || players > 4) {
            alert('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 4');
            return;
        }
        
        const gameModeSelect = document.getElementById('gameMode');
        if (gameModeSelect) {
            gameMode = gameModeSelect.value;
        }
        
        isCreativeMode = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
        openPlayerModals(players);
    });

    saveCustomizationBtn.addEventListener('click', () => {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã (–¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        const selectedTheme = document.querySelector('.theme-option.selected');
        if (selectedTheme) {
            currentTheme = selectedTheme.dataset.theme;
        }
        // --- –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ ---
        document.querySelectorAll('.color-option.selected').forEach(option => {
            const playerIndex = parseInt(option.dataset.player) - 1;
            originalPlayerColors[playerIndex] = option.dataset.color;
            playerColors[playerIndex] = option.dataset.color; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—á—É—é –∫–æ–ø–∏—é
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            document.documentElement.style.setProperty(`--player${playerIndex + 1}`, playerColors[playerIndex]);
        });
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        backToMainMenu();
    });

    addPlayerBtn.addEventListener('click', () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        if (game.players >= maxPlayers){
            alert(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ - ${maxPlayers}`)
            return;
        }

        if (Object.keys(bots).length > 0){
            bots = {};
            console.log("–ë–æ—Ç —É–±—Ä–∞–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞");
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª. –∏–≥—Ä–æ–∫–æ–≤
        game.players++;

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å—á–µ—Ç
        game.createPlayersUI();
        game.createScoreBoard();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        game.updateStatus();
    })

    removePlayerBtn.addEventListener('click', () => {
        if (game.players <= 1){
            alert(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ - 1`)
            return;
        }

        // --- –ù–û–í–û–ï: –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ 1 –∏–≥—Ä–æ–∫–∞, –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ ---
        // –≠—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∂–µ–ª–∞–µ–º–æ–π –ª–æ–≥–∏–∫–∏
        if (game.players === 2 && (gameMode === 'single' || gameMode === 'test')) {
            const botId = game.players + 1; // ID –¥–ª—è –±–æ—Ç–∞
            bots[botId] = {
                id: botId,
                name: "–ë–æ—Ç",
                symbol: symbolBot,
                color: "#808080",
                isActive: true,
                difficulty: gameMode === 'single' ? "medium" : "easy"
            };
            console.log("–ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω:", bots[botId]);
        }

        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª. –∏–≥—Ä–æ–∫–æ–≤
        game.players--;

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å—á–µ—Ç
        game.createPlayersUI();
        game.createScoreBoard();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        game.updateStatus();
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    document.querySelectorAll('.theme-option').forEach(option => {
        option.addEventListener('click', () => {
            document.querySelectorAll('.theme-option').forEach(opt => opt.classList.remove('selected'));
            option.classList.add('selected');
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    document.querySelectorAll('.color-option').forEach(option => {
        option.addEventListener('click', () => {
            const playerNum = option.dataset.player;
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if (playerNum) { // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                document.querySelectorAll(`.color-option[data-player="${playerNum}"]`).forEach(opt => {
                    opt.classList.remove('selected');
                });
            }
            // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
            option.classList.add('selected');
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏–≥—Ä–æ–∫–æ–≤
    document.querySelectorAll('.save-player-settings').forEach(button => {
        button.addEventListener('click', (e) => {
            const playerNumber = parseInt(e.target.dataset.player);
            const modal = playerModals[playerNumber];

            const nicknameInput = modal.querySelector(`#player${playerNumber}Nickname`)
            if (nicknameInput && nicknameInput.value.trim() !== ''){
                playerNicknames[playerNumber] = nicknameInput.value.trim();
            } else if (nicknameInput){
                playerNicknames[playerNumber] = `–ò–≥—Ä–æ–∫ ${playerNumber}`;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–∫–∞
            const selectedTheme = modal.querySelector('.player-theme-options .theme-option.selected');
            const selectedColor = modal.querySelector('.player-color-options .color-option.selected');
            
            if (selectedTheme) {
                playerThemesInCreative[playerNumber] = selectedTheme.dataset.theme;
            }
            
            if (selectedColor) {
                playerColors[playerNumber - 1] = selectedColor.dataset.color;
                // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                document.documentElement.style.setProperty(`--player${playerNumber}`, selectedColor.dataset.color);
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal.style.display = 'none';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã
            checkAllModalsClosed();
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏ —Ü–≤–µ—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö –∏–≥—Ä–æ–∫–æ–≤
    document.querySelectorAll('.player-theme-options .theme-option').forEach(option => {
        option.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö —Ç–µ–º –≤ —ç—Ç–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            const modalContent = option.closest('.modal-content');
            modalContent.querySelectorAll('.player-theme-options .theme-option').forEach(opt => {
                opt.classList.remove('selected');
            });
            // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
            option.classList.add('selected');
        });
    });

    document.querySelectorAll('.player-color-options .color-option').forEach(option => {
        option.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –≤ —ç—Ç–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            const modalContent = option.closest('.modal-content');
            modalContent.querySelectorAll('.player-color-options .color-option').forEach(opt => {
                opt.classList.remove('selected');
            });
            // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
            option.classList.add('selected');
        });
    });

    document.getElementById('players').addEventListener('input', (e) => {
        const playersCount = parseInt(e.target.value);
        const gameModeGroup = document.getElementById('gameModeGroup');
        if (playersCount === 1){
            gameModeGroup.style.display = 'block';
        } else {
            gameModeGroup.style.display = 'none';
            gameMode = 'single';
            if (document.getElementById('gameMode')){
                document.getElementById('gameMode').value = 'single';
            }
        }
    })

    restartBtn.addEventListener('click', () => {
        if (game) {
            game.restartGame();
        }
    });

    settingsBtn.addEventListener('click', () => {
        container.style.display = 'none';
        mainMenu.style.display = 'flex';
        creativeSettings.style.display = 'block';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    backToMainBtn.addEventListener('click', backToMainMenu);
    backToMainFromSettings.addEventListener('click', backToMainMenu);
    backToMainFromCustomization.addEventListener('click', backToMainMenu);
    backToMainFromWin.addEventListener('click', backToMainMenu);
    backToMainAfterDrawBtn.addEventListener('click', backToMainMenu);

    playAgainBtn.addEventListener('click', () => {
        winModal.style.display = 'none';
        if (game) {
            game.restartGame();
        }
    });

    playAgainAfterDrawBtn.addEventListener('click', () => {
        drawModal.style.display = 'none';
        if (game) {
            game.restartGame();
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    function backToMainMenu() {
        container.style.display = 'none';
        creativeSettings.style.display = 'none';
        customizationPanel.style.display = 'none';
        winModal.style.display = 'none';
        drawModal.style.display = 'none';
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        Object.values(playerModals).forEach(modal => {
            modal.style.display = 'none';
        });
        mainMenu.style.display = 'flex';
        toggleButtonsMenu(false);
        // --- –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–µ–Ω—é ---
        playerColors = [...originalPlayerColors];
        for (let i = 0; i < originalPlayerColors.length; i++) {
            document.documentElement.style.setProperty(`--player${i + 1}`, playerColors[i]);
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
        playerThemesInCreative = {};
        bots = {};
    }

    // –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    function startGame(rows, columns, players) {
        mainMenu.style.display = 'none';
        creativeSettings.style.display = 'none';
        customizationPanel.style.display = 'none';
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        Object.values(playerModals).forEach(modal => {
            modal.style.display = 'none';
        });
        container.style.display = 'flex';
        // --- –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∏–≥—Ä—ã ---
        playerColors = [...originalPlayerColors];

        bots = {};

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Å –±–æ—Ç–æ–º –∏ 1 –∏–≥—Ä–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞
        if ((gameMode === 'single' || gameMode === 'test') && players === 1) {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
            // ID –±–æ—Ç–∞ –±—É–¥–µ—Ç players + 1 (—Ç.–µ. 2 –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ)
            const botId = players + 1; 
            bots[botId] = {
                id: botId,
                name: "–ë–æ—Ç",
                symbol: symbolBot, // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–∫–æ–Ω–∫—É
                color: "#808080", // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                isActive: true,
                // difficulty: gameMode === 'single' ? "medium" : "easy" // –ü—Ä–∏–º–µ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            };
            console.log("StartGAME: –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω:", bots[botId]); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        } else {
            console.log("StartGame –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω:"); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }

        game = new ConnectFourGame(rows, columns, players);
    }

    // --- –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏–≥—Ä–æ–∫–æ–≤ ---
    function openPlayerModals(playersCount) {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        Object.values(playerModals).forEach(modal => {
            modal.style.display = 'none';
        });
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        for (let i = 1; i <= playersCount; i++) {
            if (playerModals[i]) {
                playerModals[i].style.display = 'flex';
            }
        }
    }

    // --- –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—Å–µ –ª–∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã ---
    function checkAllModalsClosed() {
        const allClosed = Object.values(playerModals).every(modal => {
            return modal.style.display === 'none';
        });
        
        if (allClosed) {
            // –í—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É
            const rows = parseInt(document.getElementById('rows').value);
            const columns = parseInt(document.getElementById('columns').value);
            const players = parseInt(document.getElementById('players').value);
            startGame(rows, columns, players);
        }
    }

    // --- –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–æ–∫ —Å—Ç—Ä–æ–∫ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, –ê–ê, –ê–ë...) ---
    function generateRowLabels(numRows) {
        const letters = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø';
        const labels = [];
        for (let i = 0; i < numRows; i++) {
            // –ò–Ω–¥–µ–∫—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–Ω–∏–∑—É: –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∏–∂–Ω—è—è) - 0, –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è - 1 –∏ —Ç.–¥.
            const indexFromBottom = numRows - 1 - i;

            if (indexFromBottom < letters.length) {
                // –î–ª—è –ø–µ—Ä–≤—ã—Ö 33 —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –±—É–∫–≤—É
                labels.push(letters[indexFromBottom]);
            } else {
                // –î–ª—è —Å—Ç—Ä–æ–∫ —Å–≤—ã—à–µ 33 –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                // –≠—Ç–æ –ø—Ä–∏–º–µ—Ä: AA, AB, AC... BA, BB... (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å Excel)
                let label = '';
                let tempIndex = indexFromBottom;
                while (tempIndex >= 0) {
                    label = letters[tempIndex % letters.length] + label;
                    tempIndex = Math.floor(tempIndex / letters.length) - 1;
                    if (tempIndex < 0) break;
                }
                labels.push(label || '–ê'); // –ù–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
            }
        }
        return labels;
    }

    // –ö–ª–∞—Å—Å –∏–≥—Ä—ã
    class ConnectFourGame {
        constructor(rows, columns, players) {
            this.rows = rows;
            this.columns = columns;
            this.players = players;
            // this.currentPlayer = 1;
            this.winner = 0;
            this.board = [];
            this.winningCells = [];
            this.movesCount = 0;
            this.maxMoves = rows * columns;
            this.initGame();
        }

        initGame() {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –¥–æ—Å–∫—É
            this.board = Array(this.rows).fill(null).map(() => Array(this.columns).fill(0));

            const activeBotsIds = Object.values(bots).filter(bot => bot.isActive).map(bot => bot.id);
            const allParticipantIds = [...Array(this.players).keys()].map(i => i + 1).concat(activeBotsIds);

            let isFirstPlayerDetermined = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ lastLoser –æ–¥–Ω–∏–º –∏–∑ —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (lastLoser !== null && allParticipantIds.includes(lastLoser)) {
                this.currentPlayer = lastLoser; // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (–±–æ—Ç –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫) —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
                console.log(`–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: ${lastLoser}`); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                isFirstPlayerDetermined = true;
            }

            // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç –ò–≥—Ä–æ–∫ 1
            if (!isFirstPlayerDetermined) {
                 this.currentPlayer = 1;
                 if (lastLoser === null) {
                     console.log("–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç –ò–≥—Ä–æ–∫ 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (lastLoser=null)");
                 } else { // lastLoser !== null, –Ω–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ allParticipantIds
                     console.log(`–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç –ò–≥—Ä–æ–∫ 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (lastLoser=${lastLoser} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∏–≥—Ä–µ)`);
                 }
            }

            this.winner = 0;
            this.winningCells = [];
            this.movesCount = 0;

            // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä–æ–∫–æ–≤
            this.createPlayersUI();
            // –°–æ–∑–¥–∞—ë–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
            this.createScoreBoard();
            // –°–æ–∑–¥–∞—ë–º –Ω–æ–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏ –±—É–∫–≤—ã —Å—Ç—Ä–æ–∫
            this.createColumnNumbers();
            this.createRowLetters(); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            this.createBoard();
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            this.updateStatus();

            status.textContent = t('status')

            const isCurrentPlayerBot = Object.values(bots).some(bot =>
                bot.isActive && bot.id === this.currentPlayer
            );
            console.log(`initGame: currentPlayer=${this.currentPlayer}, isBot=${isCurrentPlayerBot}`); // –û—Ç–ª–∞–¥–∫–∞
            if (isCurrentPlayerBot && this.winner === 0) {
                 console.log("initGame: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞ –±–æ—Ç–∞"); // –û—Ç–ª–∞–¥–∫–∞
                 // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout 0, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è UI
                 setTimeout(() => {
                      this.makeBotMove(); 
                 }, 0); 
            }
        }

        createPlayersUI() {
            gameInfo.innerHTML = '';
            for (let i = 1; i <= this.players; i++) {
                const playerElement = document.createElement('div');
                playerElement.className = `player player${i}`;
                playerElement.id = `player${i}`;
                if (i === this.currentPlayer) {
                    playerElement.classList.add('current-turn');
                }
                // --- –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä–∫–∏ –∏–≥—Ä–æ–∫–∞ ---
                let playerSymbol = themeSymbols[currentTheme]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (isCreativeMode && playerThemesInCreative[i]) {
                    // –í —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É –∏–≥—Ä–æ–∫–∞
                    playerSymbol = themeSymbols[playerThemesInCreative[i]] || themeSymbols['default'];
                }
                playerElement.innerHTML = `
                    <div class="player-color"></div>
                    <span>${playerNicknames[i] || `–ò–≥—Ä–æ–∫ ${i}`} ${playerSymbol}</span> <!-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∫ -->
                `;
                gameInfo.appendChild(playerElement);
            }

             // --- –ù–û–í–û–ï: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–æ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–Ω—ã ---
             Object.values(bots).forEach(bot => {
                if (bot.isActive) {
                    const botElement = document.createElement('div');
                    botElement.className = `player bot`; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å bot –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
                    botElement.id = `bot${bot.id}`;
                    // –í—ã–¥–µ–ª—è–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ (—ç—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å)
                    // if (bot.id === this.currentPlayer) {
                    //     botElement.classList.add('current-turn');
                    // }
                    
                    botElement.innerHTML = `
                        <div class="player-color" style="background-color: ${bot.color};"></div>
                        <span>${bot.name} ${bot.symbol}</span>
                    `;
                    gameInfo.appendChild(botElement);
                }
            });
        }

        createScoreBoard() {
            scoreBoard.innerHTML = '';
            for (let i = 1; i <= this.players; i++) {
                const scoreItem = document.createElement('div');
                scoreItem.className = 'score-item';
                // --- –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä–∫–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Å—á–µ—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –∫–æ–ø–∏—é —Ü–≤–µ—Ç–æ–≤ ---
                let playerSymbol = themeSymbols[currentTheme]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (isCreativeMode && playerThemesInCreative[i]) {
                    // –í —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É –∏–≥—Ä–æ–∫–∞
                    playerSymbol = themeSymbols[playerThemesInCreative[i]] || themeSymbols['default'];
                }
                scoreItem.innerHTML = `
                    <div class="player-color" style="background-color: ${playerColors[i-1]}"></div>
                    <span>${playerSymbol} ${playerNicknames[i] || `–ò–≥—Ä–æ–∫ ${i}`}: ${playerScores[i-1]}</span>`; // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª
                scoreBoard.appendChild(scoreItem);
            }

            // --- –ù–û–í–û–ï: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—á–µ—Ç –±–æ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–Ω—ã ---
            Object.values(bots).forEach(bot => {
                if (bot.isActive) {
                    const scoreItem = document.createElement('div');
                    scoreItem.className = 'score-item bot-score'; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏

                    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å—á–µ—Ç –±–æ—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –≤ playerScores
                    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º playerScores[bot.id - 1], –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–æ–≤—Å–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    // –õ—É—á—à–µ –∑–∞–≤–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å—á–µ—Ç–∞ –±–æ—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ playerScores
                    // —Å —É—á–µ—Ç–æ–º ID –±–æ—Ç–æ–≤.
                    const botScoreIndex = bot.id - 1; // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                    scoreItem.innerHTML = `
                        <div class="player-color" style="background-color: ${bot.color};"></div>
                        <span>${bot.symbol} ${bot.name}: ${playerScores[botScoreIndex] || 0}</span>`;
                    scoreBoard.appendChild(scoreItem);
                }
            });
        }

        createColumnNumbers() {
            columnNumbers.innerHTML = '';
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å –±—É–∫–≤–∞–º–∏ —Å—Ç—Ä–æ–∫
            const empty = document.createElement('div');
            empty.style.width = '25px'; // –®–∏—Ä–∏–Ω–∞ .row-letter
            empty.style.marginRight = '5px';
            columnNumbers.appendChild(empty);
            for (let col = 1; col <= this.columns; col++) {
                const colNumber = document.createElement('div');
                colNumber.className = 'column-number';
                colNumber.textContent = col;
                columnNumbers.appendChild(colNumber);
            }
        }

        createRowLetters() {
            rowLetters.innerHTML = '';
            // --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–æ–∫ ---
            const labels = generateRowLabels(this.rows);
            for (let i = 0; i < this.rows; i++) {
                const rowLetter = document.createElement('div');
                rowLetter.className = 'row-letter';
                rowLetter.textContent = labels[i];
                rowLetters.appendChild(rowLetter);
            }
        }

        createBoard() {
            board.innerHTML = '';
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º grid –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
            board.style.gridTemplateColumns = `repeat(${this.columns}, 1fr)`;
            for (let row = 0; row < this.rows; row++) {
                for (let col = 0; col < this.columns; col++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    cell.dataset.row = row;
                    cell.dataset.col = col;
                    cell.addEventListener('click', () => this.makeMove(col));
                    board.appendChild(cell);
                }
            }
        }

        makeMove(column) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º –±–æ—Ç–æ–º
              const isCurrentPlayerBot = Object.values(bots).some(bot => 
                bot.isActive && bot.id === this.currentPlayer
            );
            
            if (this.winner !== 0 || isCurrentPlayerBot) {
                // –ï—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –∏–ª–∏ —Ö–æ–¥–∏—Ç –±–æ—Ç, —á–µ–ª–æ–≤–µ–∫ –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
                return;
            }

            // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É –≤ –∫–æ–ª–æ–Ω–∫–µ
            for (let row = this.rows - 1; row >= 0; row--) {
                if (this.board[row][column] === 0) {
                    // –î–µ–ª–∞–µ–º —Ö–æ–¥
                    this.board[row][column] = this.currentPlayer;
                    this.movesCount++;
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    this.updateBoard();
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
                    if (this.checkWin(row, column)) {
                        this.winner = this.currentPlayer;
                        if (this.currentPlayer >= 1 && this.currentPlayer <= maxPlayers){
                            playerScores[this.currentPlayer - 1]++;
                        } else {
                            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞/–±–æ—Ç–∞ —Å ID ${this.currentPlayer}`);
                        }
                        this.showWinModal();
                    } else if (this.movesCount === this.maxMoves) {
                        // –ù–∏—á—å—è –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                        this.showDrawModal();
                    } else {
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
                        this.nextPlayer();
                    }
                    return;
                }
            }
            // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
            status.textContent = '–≠—Ç–∞ –∫–æ–ª–æ–Ω–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!';
            setTimeout(() => this.updateStatus(), 1500);
        }

        makeBotMove() {
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É this.isBotGame
            // if (!this.isBotGame || this.currentPlayer !== 2 || this.winner !== 0) return;
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ - –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç
            const isCurrentPlayerBot = Object.values(bots).some(bot => 
                bot.isActive && bot.id === this.currentPlayer
            );

            // console.log('mBM: —à–∞–≥ 1')
            if (!isCurrentPlayerBot || this.winner !== 0) return;

            // console.log('mBM: —à–∞–≥ 2')
            // 1. –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ–º –ª–∏ –º—ã –≤—ã–∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥—É
            for (let col = 0; col < this.columns; col++) {
                const row = this.getLowestEmptyRow(col);
                if (row !== -1) {
                    this.board[row][col] = this.currentPlayer; // –ò—Å–ø–æ–ª—å–∑—É–µ–º this.currentPlayer
                    if (this.checkWinForBot(row, col, this.currentPlayer)) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º this.currentPlayer
                        this.board[row][col] = 0;
                        this.executeBotMove(row, col); // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
                        return;
                    }
                    this.board[row][col] = 0;
                }
            }
            // console.log('mBM: —à–∞–≥ 3')

            // 2. –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –ª–∏ –≤—ã–∏–≥—Ä–∞—Ç—å *–ª—é–±–æ–π* –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ (–Ω–µ –±–æ—Ç) –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥—É –∏ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ
            // –ù–∞–π–¥–µ–º ID –æ–±—ã—á–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–Ω–µ –±–æ—Ç–∞)
            let humanPlayerId = 1; // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –æ–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫ - —ç—Ç–æ 1
            for (let i = 1; i <= this.players; i++) {
                if (!Object.values(bots).some(bot => bot.id === i)) {
                    humanPlayerId = i;
                    break;
                }
            }
            // console.log('mBM: —à–∞–≥ 4')
            
            for (let col = 0; col < this.columns; col++) {
                const row = this.getLowestEmptyRow(col);
                if (row !== -1) {
                    this.board[row][col] = humanPlayerId; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ö–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞
                    if (this.checkWinForBot(row, col, humanPlayerId)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –ø–æ–±–µ–¥—É
                        this.board[row][col] = 0;
                        this.executeBotMove(row, col); // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                        return;
                    }
                    this.board[row][col] = 0;
                }
            }
            // console.log('mBM: —à–∞–≥ 5')

            // 3. –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö —Ö–æ–¥–æ–≤, —Å–¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥ –≤ –Ω–µ–ø–æ–ª–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
            const availableColumns = [];
            for (let col = 0; col < this.columns; col++) {
                if (this.getLowestEmptyRow(col) !== -1) {
                    availableColumns.push(col);
                }
            }

            // console.log('mBM: —à–∞–≥ 6')

            if (availableColumns.length > 0) {
                const randomCol = availableColumns[Math.floor(Math.random() * availableColumns.length)];
                const row = this.getLowestEmptyRow(randomCol);
                this.executeBotMove(row, randomCol);
            }

            // console.log('mBM: —à–∞–≥ 7 —Ñ–∏–Ω–∞–ª')
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫, –∏–≥—Ä–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –ø–æ –Ω–∏—á—å–µ–π
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∏–∂–Ω–µ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        getLowestEmptyRow(column) {
            for (let row = this.rows - 1; row >= 0; row--) {
                if (this.board[row][column] === 0) {
                    return row;
                }
            }
            return -1; // –ö–æ–ª–æ–Ω–∫–∞ –ø–æ–ª–Ω–∞—è
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥—ã (–¥–ª—è –±–æ—Ç–∞) (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        checkWinForBot(row, col, player) {
            const directions = [
                { dr: 0, dc: 1 },  // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
                { dr: 1, dc: 0 },  // –í–µ—Ä—Ç–∏–∫–∞–ª—å
                { dr: 1, dc: 1 },  // –î–∏–∞–≥–æ–Ω–∞–ª—å /
                { dr: 1, dc: -1 }  // –î–∏–∞–≥–æ–Ω–∞–ª—å \
            ];

            for (const { dr, dc } of directions) {
                let count = 1;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                let r = row + dr;
                let c = col + dc;
                while (r >= 0 && r < this.rows && c >= 0 && c < this.columns && this.board[r][c] === player) {
                    count++;
                    r += dr;
                    c += dc;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                r = row - dr;
                c = col - dc;
                while (r >= 0 && r < this.rows && c >= 0 && c < this.columns && this.board[r][c] === player) {
                    count++;
                    r -= dr;
                    c -= dc;
                }
                if (count >= 4) {
                    return true;
                }
            }
            return false;
        }

        executeBotMove(row, col) {
            // –£–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ this.board[row][col] = 2;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º)
            const isCurrentPlayerBot = Object.values(bots).some(bot => 
                bot.isActive && bot.id === this.currentPlayer
            );
            if (!isCurrentPlayerBot || this.winner !== 0) return;

            this.board[row][col] = this.currentPlayer; // –ë–æ—Ç –¥–µ–ª–∞–µ—Ç —Ö–æ–¥ –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏
            this.movesCount++;
            this.updateBoard();
            if (this.checkWin(row, col)) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                this.winner = this.currentPlayer; // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - —Ç–µ–∫—É—â–∏–π (–±–æ—Ç)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –±–æ—Ç–∞. –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å.
                // –ü–æ—Å–∫–æ–ª—å–∫—É playerScores —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ 1-4, 
                // –¥–ª—è –±–æ—Ç–∞ —Å ID=2 (–ø—Ä–∏ 1 –∏–≥—Ä–æ–∫–µ) –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å 1.
                // –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–∏.
                // –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—á–µ—Ç–∞.
                if (this.currentPlayer >= 1 && this.currentPlayer <= 4) {
                     playerScores[this.currentPlayer - 1]++; 
                } else {
                     console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç –¥–ª—è –±–æ—Ç–∞ —Å ID ${this.currentPlayer}`);
                }
                this.showWinModal();
            } else if (this.movesCount === this.maxMoves) {
                this.showDrawModal();
            } else {
                this.nextPlayer(); // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É/–±–æ—Ç—É
            }
        }

        updateBoard() {
            const cells = board.querySelectorAll('.cell');
            cells.forEach(cell => {
                const row = parseInt(cell.dataset.row);
                const col = parseInt(cell.dataset.col);
                // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏–≥—Ä–æ–∫–æ–≤ –∏ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ
                cell.classList.remove('player1', 'player2', 'player3', 'player4', 'winning-cell');
                cell.textContent = ''; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

                const playerNumber = this.board[row][col];
                if (playerNumber !== 0) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
                    cell.classList.add(`player${playerNumber}`);

                    const bot = Object.values(bots).find(b => b.isActive && b.id === playerNumber);
                    if (bot){
                        cell.textContent = `${bot.symbol}`;
                    } else {

                        // --- –ò–ó–ú–ï–ù–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∞ ---
                        let playerSymbol = themeSymbols[currentTheme]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        if (isCreativeMode && playerThemesInCreative[playerNumber]) {
                            // –í —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É –∏–≥—Ä–æ–∫–∞
                            playerSymbol = themeSymbols[playerThemesInCreative[playerNumber]] || themeSymbols['default'];
                        }
                        cell.textContent = playerSymbol; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª
                    }
                }

                // –ü–æ–º–µ—á–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —è—á–µ–π–∫–∏
                if (this.winningCells.some(c => c.row === row && c.col === col)) {
                    cell.classList.add('winning-cell');
                }
            });
        }

        checkWin(row, col) {
            const player = this.board[row][col];
            const directions = [
                { dr: 0, dc: 1 },  // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å ‚Üî
                { dr: 1, dc: 0 },  // –í–µ—Ä—Ç–∏–∫–∞–ª—å  ‚Ü®
                { dr: 1, dc: 1 },  // –î–∏–∞–≥–æ–Ω–∞–ª—å ‚Üò
                { dr: 1, dc: -1 }  // –î–∏–∞–≥–æ–Ω–∞–ª—å ‚Üô
            ];
            for (const { dr, dc } of directions) {
                let count = 1;
                this.winningCells = [{ row, col }];
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                let r = row + dr;
                let c = col + dc;
                while (r >= 0 && r < this.rows && c >= 0 && c < this.columns && this.board[r][c] === player) {
                    count++;
                    this.winningCells.push({ row: r, col: c });
                    r += dr;
                    c += dc;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                r = row - dr;
                c = col - dc;
                while (r >= 0 && r < this.rows && c >= 0 && c < this.columns && this.board[r][c] === player) {
                    count++;
                    this.winningCells.push({ row: r, col: c });
                    r -= dr;
                    c -= dc;
                }
                if (count >= 4) {
                    return true;
                }
            }
            this.winningCells = [];
            return false;
        }

        nextPlayer() {            
            // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã (–∏–≥—Ä–æ–∫–∏ + –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã)
            const allPlayersAndBots = [];

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            for (let i = 1; i <= this.players; i++) {
                allPlayersAndBots.push(i);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
            Object.values(bots).forEach(bot => {
                if (bot.isActive) {
                    allPlayersAndBots.push(bot.id);
                }
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–∞
            allPlayersAndBots.sort((a, b) => a - b);

            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ
            const currentIndex = allPlayersAndBots.indexOf(this.currentPlayer);

            if (currentIndex !== -1) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É/–±–æ—Ç—É –ø–æ –∫—Ä—É–≥—É
                const nextIndex = (currentIndex + 1) % allPlayersAndBots.length;
                this.currentPlayer = allPlayersAndBots[nextIndex];
            } else {
                // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–≥—Ä–æ–∫—É 1
                this.currentPlayer = 1;
            }

            this.updateStatus();
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            document.querySelectorAll('.player').forEach(playerElement => {
                // --- –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –±–æ—Ç–æ–≤ ---
                // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ id —ç–ª–µ–º–µ–Ω—Ç–∞ (player1, player2, bot3 –∏ —Ç.–¥.)
                const elementId = playerElement.id;
                let elementPlayerId;

                if (elementId.startsWith('player')) {
                    elementPlayerId = parseInt(elementId.replace('player', ''));
                } else if (elementId.startsWith('bot')) {
                    elementPlayerId = parseInt(elementId.replace('bot', ''));
                }

                if (elementPlayerId === this.currentPlayer) {
                    playerElement.classList.add('current-turn');
                    playerElement.classList.remove('winner', 'loser');
                } else {
                    playerElement.classList.remove('current-turn');
                }
            });

            // --- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–ø–µ—Ä—å –±–æ—Ç ---
            const isCurrentPlayerBot = Object.values(bots).some(bot => 
                bot.isActive && bot.id === this.currentPlayer
            );
            
            if (isCurrentPlayerBot && this.winner === 0) {
                setTimeout(() => {
                    this.makeBotMove();
                }, 500);
            } else {
                console.log("nextPlayer: –•–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"); // –û—Ç–ª–∞–¥–∫–∞
            }
        }

        updateStatus() {
            const isCurrentPlayerBot = Object.values(bots).some(bot => 
                bot.isActive && bot.id === this.currentPlayer
            );
            
            if (isCurrentPlayerBot) {
                const botName = Object.values(bots).find(b => b.id === this.currentPlayer)?.name || '–ë–æ—Ç'

                status.textContent = t('statusBotTurn', {botName : botName});
            } else {
                const playerName = playerNicknames[this.currentPlayer] || t('playerName', {number: this.currentPlayer})
                status.textContent = t('statusTurn', {playerName : playerName});
            }
        }

        showWinModal() {
            winMessage.textContent = t('winModalTitle');
            const winnerBot = Object.values(bots).find(bot => bot.id === this.winner);
            
            if (winnerBot) {
                winDescription.textContent = t('winDescriptionBot', {winnerBot: winnerBot.name}) //`${winnerBot.name} –≤—ã–∏–≥—Ä–∞–ª!`;
            } else {
                const winnerName = playerNicknames[this.winner] || t('playerName', {number: this.winner})
                winDescription.textContent = t('winDescriptionPlayer', {winnerName: winnerName}) //`${playerNicknames[this.winner] || `–ò–≥—Ä–æ–∫ ${this.winner}`} –ø–æ–±–µ–¥–∏–ª!`;
            }

            winModal.style.display = 'flex';
            // –ü–æ–º–µ—á–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —è—á–µ–π–∫–∏
            this.updateBoard();

            // --- –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º lastLoser —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã ---
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
            if (this.players === 1) {
                // –ï—Å–ª–∏ 1 –∏–≥—Ä–æ–∫, –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π - —ç—Ç–æ –æ–Ω —Å–∞–º? –ò–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É?
                // –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ "—Ö–æ–¥–∏—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π", –µ—Å–ª–∏ –æ–Ω –≤—ã–∏–≥—Ä–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ, 
                // —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º. –ù–æ –µ—Å–ª–∏ –æ–Ω –≤—ã–∏–≥—Ä–∞–ª, –æ–Ω –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π.
                // –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ —Å–±—Ä–æ—Å–∏—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∏–Ω–∞–ª –ò–≥—Ä–æ–∫ 1.
                // –ò–õ–ò, –µ—Å–ª–∏ –±–æ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞–ª, –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π - –±–æ—Ç, –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏–ª —á–µ–ª–æ–≤–µ–∫, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
                // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤ —Ä–µ–∂–∏–º–µ "1 –∏–≥—Ä–æ–∫" –±–æ—Ç –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å (ID=2).
                // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ 1, –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π - –±–æ—Ç (2). –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏–ª –±–æ—Ç (2), –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π - –∏–≥—Ä–æ–∫ (1).
                // –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç.
                const activeBots = Object.values(bots).filter(bot => bot.isActive);
                if (activeBots.length > 0) {
                    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∏–≥—Ä—É "1 –∏–≥—Ä–æ–∫ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞"
                    lastLoser = this.winner === 1 ? activeBots[0].id : 1;
                } else {
                    // –ù–µ—Ç –±–æ—Ç–∞, —Å–±—Ä–æ—Å–∏–º
                    lastLoser = null; 
                }
            } else if (this.players === 2) {
                // –î–ª—è 2 –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π - —Ç–æ—Ç, –∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª
                lastLoser = this.winner === 1 ? 2 : 1;
            } else {
                // –î–ª—è 3+ –∏–≥—Ä–æ–∫–æ–≤, –ª–æ–≥–∏–∫–∞ —Å–ª–æ–∂–Ω–µ–µ. 
                // –ú–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å "–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º" —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É, –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å.
                // –ü–æ–∫–∞ —Å–±—Ä–æ—Å–∏–º, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ.
                lastLoser = null; 
            }
            console.log(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${this.winner}, –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (–¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã): ${lastLoser}`); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

            // --- –ù–û–í–û–ï: –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ >= 2) ---
            if (this.players >= 2) {
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ —Ü–≤–µ—Ç–æ–≤
                const tempColors = [...playerColors];

                // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ, –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π - —Ü–≤–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –æ–±–º–µ–Ω–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
                // –î–ª—è 3+ –∏–≥—Ä–æ–∫–æ–≤ –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–µ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ –ø–æ–ª—É—á–∞—é—Ç —Ü–≤–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ.
                // –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞: —Ü–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –≤–ª–µ–≤–æ (1->2, 2->3, 3->4, 4->1)
                if (this.players === 2) {
                     // –î–ª—è 2 –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
                     // lastLoser —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ
                     playerColors[0] = tempColors[1];
                     playerColors[1] = tempColors[0];
                } else {
                    // –î–ª—è 3+ –∏–≥—Ä–æ–∫–æ–≤: —Å–¥–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ
                    for (let i = 0; i < this.players; i++) {
                        const nextIndex = (i + 1) % this.players;
                        playerColors[i] = tempColors[nextIndex];
                    }
                    // lastLoser —É–∂–µ —Å–±—Ä–æ—à–µ–Ω –≤ null –≤—ã—à–µ
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                for (let i = 0; i < this.players; i++) {
                    document.documentElement.style.setProperty(`--player${i + 1}`, playerColors[i]);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∏–≥—Ä–æ–∫–æ–≤
                document.querySelectorAll('.player').forEach((player, index) => {
                    if (index + 1 === this.winner) {
                        player.classList.add('winner');
                    } else {
                        player.classList.add('loser');
                    }
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ —Å—á–µ—Ç–µ
                document.querySelectorAll('.score-item').forEach((scoreItem, index) => {
                    const playerColorElement = scoreItem.querySelector('.player-color');
                    if (playerColorElement && index < this.players) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –∫–æ–ø–∏—é —Ü–≤–µ—Ç–æ–≤
                        playerColorElement.style.backgroundColor = playerColors[index];
                    }
                });
            }
        }

        showDrawModal() {
            drawModal.style.display = 'flex';
            lastLoser = null;
        }

        restartGame() {
            this.initGame();
        }

        getPlayerInfo(playerId){
            if (playerId >= 1 && playerId <= this.players){
                return {
                    id: playerId,
                    name: playerNicknames[playerId] || `–ò–≥—Ä–æ–∫ ${playerId}`,
                    symbol: isCreativeMode && playerThemesInCreative[playerId] ?
                    themeSymbols[playerThemesInCreative[playerId]] : themeSymbols[currentTheme],
                    color: playerColors[playerId - 1] || "#000000",
                    isBot: false
                };
            }

            return null;
        }
    }
});

function updateGameLanguage() {
    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã...");
    
    // 1. –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (window.game) {
        // a. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        window.game.updateStatus(); 
        console.log("  - –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω");

        // b. –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ –±–æ—Ç–æ–≤ –≤ –ø–∞–Ω–µ–ª—è—Ö game-info –∏ score-board
        window.game.createPlayersUI();
        window.game.createScoreBoard();
        console.log("  - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö –∏ —Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã");

        // c. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø–æ–±–µ–¥—ã, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        const winModalElement = document.getElementById('winModal');
        if (winModalElement && winModalElement.style.display !== 'none') {
            console.log("  - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–±–µ–¥—ã");
            // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const winMsgEl = document.getElementById('winMessage'); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ü–æ–±–µ–¥–∞!"
            // winDescription –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ showWinModal, –Ω–æ –º—ã –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const playAgainBtnEl = document.getElementById('playAgainBtn');
            const backToMainBtnEl = document.getElementById('backToMainFromWin');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            if (winMsgEl) {
                winMsgEl.textContent = t('modals.win.title'); // "–ü–æ–±–µ–¥–∞!" / "Victory!"
            }
            if (playAgainBtnEl) {
                playAgainBtnEl.textContent = t('PlayAgainBtn'); // "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" / "Play Again"
            }
            if (backToMainBtnEl) {
                backToMainBtnEl.textContent = t('BackToMainFromWin'); // "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" / "Back to Menu"
            }
            
            // –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–≥—Ä–æ–∫ 1 –ø–æ–±–µ–¥–∏–ª!") –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
            // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤–Ω—É—Ç—Ä–∏ game.showWinModal() –∏–ª–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞.
            // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—è –º–æ–¥–∞–ª–∫—É,
            // –≤–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫—Ç–æ –ø–æ–±–µ–¥–∏–ª (window.game.winner) –∏ —Ç–∏–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–∏–≥—Ä–æ–∫/–±–æ—Ç).
            // –≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
            // –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤ showWinModal —Å–Ω–æ–≤–∞, 
            // –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∞.
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ.
            // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ showWinModal.
            // –ù–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ:
            if (window.game.winner) {
                 const winDescEl = document.getElementById('winDescription');
                 if (winDescEl) {
                     // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ showWinModal –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                     const winnerBot = Object.values(window.bots || {}).find(bot => bot.id === window.game.winner);
                     if (winnerBot) {
                         winDescEl.textContent = t('modals.win.description_bot', { winnerName: winnerBot.name });
                     } else {
                         // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ playerNicknames –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ window.game
                         const winnerName = (window.playerNicknames && window.playerNicknames[window.game.winner]) || 
                                            t('game.player', { number: window.game.winner });
                         winDescEl.textContent = t('modals.win.description_player', { winnerName: winnerName });
                     }
                 }
            }
        }

        // d. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –Ω–∏—á—å–µ–π, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        const drawModalElement = document.getElementById('drawModal');
        if (drawModalElement && drawModalElement.style.display !== 'none') {
             console.log("  - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∏—á—å–µ–π");
             // –í —Ç–µ–∫—É—â–µ–º HTML —É <h2> –∏ <p> –Ω–µ—Ç id, –¥–æ–±–∞–≤–∏–º –∏—Ö –≤ HTML –∏–ª–∏ –Ω–∞–π–¥–µ–º –ø–æ —Ç–µ–≥—É/–ø–æ–∑–∏—Ü–∏–∏
             // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ id="drawModalTitle" –∏ id="drawModalDescription"
             const drawTitleEl = document.getElementById('drawModalTitle'); // <h2>
             const drawDescEl = document.getElementById('drawModalDescription'); // <p>
             const playAgainDrawBtnEl = document.getElementById('playAgainAfterDrawBtn');
             const backToMainDrawBtnEl = document.getElementById('backToMainAfterDrawBtn');

             if (drawTitleEl) {
                 drawTitleEl.textContent = t('modals.draw.title'); // "–ù–∏—á—å—è!" / "Draw!"
             }
             if (drawDescEl) {
                 drawDescEl.textContent = t('modals.draw.description'); // "–í—Å–µ —è—á–µ–π–∫–∏..."
             }
             if (playAgainDrawBtnEl) {
                 playAgainDrawBtnEl.textContent = t('playAgainAfterDrawBtn'); // "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
             }
             if (backToMainDrawBtnEl) {
                 backToMainDrawBtnEl.textContent = t('backToMainAfterDrawBtn'); // "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
             }
        }
    } else {
        console.log("  - –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∫–Ω–æ–ø–∫–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç.–¥.)
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è applyTranslations() —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ.
    // –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∏–ª–∏ –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞, –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –µ—ë –∑–¥–µ—Å—å.
    // applyTranslations(); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
    console.log("  - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–∑–æ–≤ applyTranslations)");
}
// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Ç–∞–∫–∞—è
window.updateGameLanguage = updateGameLanguage;